{"version":3,"sources":["webpack:///./task-02.js","webpack:///./task-01.js","webpack:///./task-03.js"],"names":["users","name","active","toggleUserState","allUsers","userName","Promise","resolve","reject","map","user","logger","updatedUsers","console","table","then","delay","ms","time","setTimeout","log","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"wJAEMA,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAEjC,OAAO,IAAIC,SAAS,SAACC,EAASC,GAI1BD,EAHmBH,EAASK,KAAI,SAAAC,GAAI,OACpCA,EAAKT,OAASI,EAAd,iBAA8BK,EAA9B,CAAoCR,QAASQ,EAAKR,SAAWQ,UAK7DC,EAAS,SAAAC,GAAY,OAAIC,QAAQC,MAAMF,IAE7CT,EAAgBH,EAAO,SAASe,KAAKJ,GACrCR,EAAgBH,EAAO,OAAOe,KAAKJ,GCpBnC,IAAMK,EAAQ,SAAAC,GACZ,OAAO,IAAIX,SAAQ,SAACC,EAASC,GAC3B,IAAMU,EAAOD,EACbE,YAAW,WACTZ,EAAQW,KAEPD,OAIDN,EAAS,SAAAO,GAAI,OAAIL,QAAQO,IAAR,kBAA8BF,EAA9B,OAGvBF,EAAM,KAAMD,KAAKJ,GACjBK,EAAM,KAAMD,KAAKJ,GACjBK,EAAM,MAAMD,KAAKJ,GCdjB,IAIQU,EAAkB,SAACC,GACvB,IAL+BC,EAAKC,EAK9BR,GALyBO,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAkBpD,OAZgB,IAAIjB,SAAQ,SAACC,EAASC,GAElCW,YAAW,WACQM,KAAKE,SAAW,GAG/BpB,EAAQ,CAACqB,GAAIN,EAAYM,GAAIV,KAAMF,IAEnCR,EAAO,CAACoB,GAAIN,EAAYM,OAEzBZ,OAKHa,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAIV,EAAU,EAAVA,KACvBL,QAAQO,IAAR,eAA2BQ,EAA3B,iBAA8CV,EAA9C,OAGIY,EAAW,SAAC,GAAS,IAARF,EAAQ,EAARA,GACjBf,QAAQkB,KAAR,gCAA6CH,EAA7C,8BAIFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BjB,KAAKc,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BjB,KAAKc,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC/BjB,KAAKc,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BjB,KAAKc,GACLI,MAAMH,K","file":"main.c4b885d144f3d4d355b3.js","sourcesContent":["// Задание №2\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n\r\n  return new Promise ((resolve, reject) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user);\r\n\r\n      resolve(updatedUsers);\r\n  });\r\n}\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n","\r\nconst delay = ms => {\r\n  return new Promise((resolve, reject) => {\r\n    const time = ms;\r\n    setTimeout(() => {\r\n      resolve(time)\r\n     \r\n    }, ms)\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n","\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  const makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    const promise = new Promise((resolve, reject) => {\r\n          \r\n        setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n    \r\n        if (canProcess) {\r\n            resolve({id: transaction.id, time: delay})\r\n            } else {\r\n            reject({id: transaction.id});\r\n            }\r\n        }, delay);\r\n    })\r\n    return promise;\r\n  };\r\n  \r\n  const logSuccess = ({id, time}) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n  \r\n  const logError = ({id}) => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n \r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"sourceRoot":""}